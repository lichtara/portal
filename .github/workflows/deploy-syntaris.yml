name: Deploy syntaris-harmony

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: "Kubernetes namespace"
        required: false
        default: "default"
      imageTag:
        description: "Image tag (default: latest)"
        required: false
        default: "latest"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ github.event.inputs.namespace || 'default' }}
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/syntaris-harmony
      IMAGE_TAG: ${{ github.event.inputs.imageTag || 'latest' }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      OTLP_ENDPOINT: ${{ secrets.GRAFANA_CLOUD_OTLP_ENDPOINT }}
      GRAFANA_CLOUD_API_TOKEN: ${{ secrets.GRAFANA_CLOUD_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare kubeconfig
        run: |
          set -euo pipefail
          mkdir -p ~/.kube
          if [ -z "${KUBE_CONFIG}" ]; then
            echo "KUBE_CONFIG secret is not set" >&2; exit 1;
          fi
          # Accept either base64 (most common) or plain kubeconfig JSON/YAML
          if echo "$KUBE_CONFIG" | head -c1 | grep -q '{'; then
            printf "%s" "$KUBE_CONFIG" > ~/.kube/config
          else
            printf "%s" "$KUBE_CONFIG" | base64 -d > ~/.kube/config || printf "%s" "$KUBE_CONFIG" > ~/.kube/config
          fi
          chmod 600 ~/.kube/config

      - name: Set image override in kustomization
        run: |
          set -euo pipefail
          IMAGE_REF="${IMAGE_NAME}:${IMAGE_TAG}"
          sed -i "s#newName: ghcr.io/.*/syntaris-harmony#newName: ${IMAGE_NAME}#" k8s/services/syntaris-harmony/kustomization.yaml
          sed -i "s#newTag: .*#newTag: ${IMAGE_TAG}#" k8s/services/syntaris-harmony/kustomization.yaml
          echo "Using image ${IMAGE_REF} in kustomization"

      - name: Create/Update OTEL secret (Grafana Cloud)
        run: |
          set -euo pipefail
          if [ -z "${OTLP_ENDPOINT:-}" ] || [ -z "${GRAFANA_CLOUD_API_TOKEN:-}" ]; then
            echo "Skipping OTEL secret: missing OTLP endpoint or API token (set GRAFANA_CLOUD_OTLP_ENDPOINT and GRAFANA_CLOUD_API_TOKEN secrets)"
          else
            kubectl -n "$NAMESPACE" create secret generic otel-auth \
              --from-literal=OTEL_EXPORTER_OTLP_ENDPOINT="${OTLP_ENDPOINT}" \
              --from-literal=OTEL_EXPORTER_OTLP_HEADERS="Authorization=Bearer ${GRAFANA_CLOUD_API_TOKEN}" \
              --dry-run=client -o yaml | kubectl -n "$NAMESPACE" apply -f -
          fi

      - name: Deploy with kustomize
        run: |
          kubectl -n "$NAMESPACE" apply -k k8s

